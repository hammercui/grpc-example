// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_package

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWorldServiceClient is the client API for HelloWorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldServiceClient interface {
	// define the interface and data type
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	//双向通信
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (HelloWorldService_BidirectionalStreamClient, error)
}

type helloWorldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldServiceClient(cc grpc.ClientConnInterface) HelloWorldServiceClient {
	return &helloWorldServiceClient{cc}
}

func (c *helloWorldServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/rpc_package.HelloWorldService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (HelloWorldService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorldService_ServiceDesc.Streams[0], "/rpc_package.HelloWorldService/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldServiceBidirectionalStreamClient{stream}
	return x, nil
}

type HelloWorldService_BidirectionalStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*SteamResponse, error)
	grpc.ClientStream
}

type helloWorldServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *helloWorldServiceBidirectionalStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldServiceBidirectionalStreamClient) Recv() (*SteamResponse, error) {
	m := new(SteamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServiceServer is the server API for HelloWorldService service.
// All implementations should embed UnimplementedHelloWorldServiceServer
// for forward compatibility
type HelloWorldServiceServer interface {
	// define the interface and data type
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	//双向通信
	BidirectionalStream(HelloWorldService_BidirectionalStreamServer) error
}

// UnimplementedHelloWorldServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServiceServer struct {
}

func (UnimplementedHelloWorldServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloWorldServiceServer) BidirectionalStream(HelloWorldService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}

// UnsafeHelloWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServiceServer will
// result in compilation errors.
type UnsafeHelloWorldServiceServer interface {
	mustEmbedUnimplementedHelloWorldServiceServer()
}

func RegisterHelloWorldServiceServer(s grpc.ServiceRegistrar, srv HelloWorldServiceServer) {
	s.RegisterService(&HelloWorldService_ServiceDesc, srv)
}

func _HelloWorldService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_package.HelloWorldService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorldService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServiceServer).BidirectionalStream(&helloWorldServiceBidirectionalStreamServer{stream})
}

type HelloWorldService_BidirectionalStreamServer interface {
	Send(*SteamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type helloWorldServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *helloWorldServiceBidirectionalStreamServer) Send(m *SteamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldServiceBidirectionalStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldService_ServiceDesc is the grpc.ServiceDesc for HelloWorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_package.HelloWorldService",
	HandlerType: (*HelloWorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloWorldService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStream",
			Handler:       _HelloWorldService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
